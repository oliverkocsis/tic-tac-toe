{"version":3,"sources":["Counter.js","Space.js","Grid.js","Winner.js","App.js","serviceWorker.js","index.js","../../tic-tac-toe-core/index.js"],"names":["Counter","props","styleX","styleO","current","color","style","margin","width","display","gridTemplateColumns","marginBottom","textAlign","verticalAlign","Space","height","row","borderBottom","col","borderRight","onClick","e","onMark","mark","Grid","grid","map","i","space","j","key","Winner","marginTop","winner","App","game","state","undefined","reset","next","console","info","error","setState","TicTacToe","this","fontSize","view","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","x","y","first","Error","player","h","length","v","module","exports"],"mappings":"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","file":"static/js/main.97164551.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Counter(props) {\r\n  const style = {\r\n    margin: 'auto',\r\n    width: '100%',\r\n    display: 'grid',\r\n    gridTemplateColumns: '11rem 11rem 11rem',\r\n    marginBottom: '1rem',\r\n    textAlign: 'center',\r\n    verticalAlign: 'middle',\r\n  }\r\n\r\n  let styleX;\r\n  let styleO;\r\n\r\n  if (props.current === 'o') {\r\n    styleX = {\r\n      color: '#d8dee9',\r\n    }\r\n  } else {\r\n    styleO = {\r\n      color: '#d8dee9',\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={style}>\r\n      <div style={styleX}>x</div>\r\n      <div>&nbsp;</div>\r\n      <div style={styleO}>o</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\n\r\nfunction Space(props) {\r\n  let style = {\r\n    textAlign: 'center',\r\n    verticalAlign: 'middle',\r\n    height: '11rem',\r\n  }\r\n\r\n  if (props.row < 2) {\r\n    style = {\r\n      ...style,\r\n      borderBottom: '1px solid #d8dee9',\r\n    }\r\n  }\r\n\r\n  if (props.col < 2) {\r\n    style = {\r\n      ...style,\r\n      borderRight: '1px solid #d8dee9',\r\n    }\r\n  }\r\n\r\n  return <div style={style} onClick={(e) => props.onMark(props.row, props.col)}>{props.mark}</div>;\r\n}\r\n\r\nexport default Space;","import React from 'react';\r\nimport Space from './Space'\r\n\r\nfunction Grid(props) {\r\n  const style = {\r\n    margin: 'auto',\r\n    width: '100%',\r\n    display: 'grid',\r\n    gridTemplateColumns: '11rem 11rem 11rem',\r\n  }\r\n\r\n  return (\r\n    <div style={style}>\r\n      {\r\n        props.grid.map((row, i) => row.map((space, j) => <Space key={`${i}-${j}`} mark={space} row={i} col={j} onMark={props.onMark}/>))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\n\r\nfunction Winner(props) {\r\n  let style = {\r\n    margin: 'auto',\r\n    width: '100%',\r\n    marginTop: '1rem',\r\n    textAlign: 'center',\r\n    verticalAlign: 'middle',\r\n\r\n  }\r\n\r\n  return <div style={style}>{props.winner} won</div>;\r\n}\r\n\r\nexport default Winner;","import React from 'react';\nimport { TicTacToe } from 'tic-tac-toe-core';\nimport Counter from './Counter';\nimport Grid from './Grid';\nimport Winner from './Winner';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: new TicTacToe()\n    }\n  }\n\n  onMark = (row, col) => {\n    const game = this.state.game;\n    let winner;\n    if (this.state.winner) {\n      winner = undefined;\n      game.reset();\n    } else {\n      try {\n        winner = game.next(row, col);\n        console.info(winner);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    this.setState({\n      game: game,\n      winner: winner,\n    });\n  }\n\n  render() {\n    const style = {\n      margin: 'auto',\n      width: '33rem',\n      fontSize: '7rem',\n    }\n\n    let winner;\n    if (this.state.winner) {\n      winner = <Winner winner={this.state.winner} />;\n    }\n\n    return (\n      <div style={style}>\n        <Counter current={this.state.game.current()} />\n        <Grid grid={this.state.game.view()} onMark={this.onMark} />\n        {winner}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","class TicTacToe {\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n\r\n    next(x, y) {\r\n        const space = this.grid[x][y];\r\n        if (' ' === space) {\r\n            this.grid[x][y] = this.player;\r\n\r\n            // horizontal winner\r\n            for (let h = 0; h < this.grid.length; h++) {\r\n                let first = this.grid[h][0];\r\n                if (' ' !== first && this.grid[h][1] === first && this.grid[h][2] === first) {\r\n                    return first;\r\n                }\r\n            }\r\n\r\n            // vertical winner\r\n            for (let v = 0; v < this.grid.length; v++) {\r\n                let first = this.grid[0][v];\r\n                if (' ' !== first && this.grid[1][v] === first && this.grid[2][v] === first) {\r\n                    return first;\r\n                }\r\n            }\r\n\r\n            // diagonal winner\r\n            let first;\r\n            first = this.grid[0][0];\r\n            if (' ' !== first && this.grid[1][1] === first && this.grid[2][2] === first) {\r\n                return first;\r\n            }\r\n            first = this.grid[0][2];\r\n            if (' ' !== first && this.grid[1][1] === first && this.grid[2][0] === first) {\r\n                return first;\r\n            }\r\n\r\n            this.player === 'x' ? this.player = 'o' : this.player = 'x';\r\n        } else {\r\n            throw Error('A player must mark spaces');\r\n        }\r\n    }\r\n\r\n    view() {\r\n        return this.grid;\r\n    }\r\n\r\n    current() {\r\n        return this.player;\r\n    }\r\n\r\n    reset() {\r\n        this.grid = [\r\n            [' ', ' ', ' '],\r\n            [' ', ' ', ' '],\r\n            [' ', ' ', ' ']\r\n        ]\r\n        this.player = 'x';\r\n    }\r\n}\r\n\r\nmodule.exports.TicTacToe = TicTacToe"],"sourceRoot":""}